// Source : https://leetcode.cn/problems/add-two-numbers/
// Author : GuoQiang Yao
// Date : 2022-5-24

/**************************************************************************************
给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。

请你将两个数相加，并以相同形式返回一个表示和的链表。

你可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例 1：


输入：l1 = [2,4,3], l2 = [5,6,4]
输出：[7,0,8]
解释：342 + 465 = 807.
示例 2：

输入：l1 = [0], l2 = [0]
输出：[0]
示例 3：

输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
输出：[8,9,9,9,0,0,0,1]

提示：

每个链表中的节点数在范围 [1, 100] 内
0 <= Node.val <= 9
题目数据保证列表表示的数字不含前导零

**************************************************************************************/

/*******************************************************************************************************
题目分析： 本题使用两个游标从两个链表头开始向后遍历即可，然后有进位的时候需要在下一次的结果基础上加上进位的信息，
最后处理完两个链表之后如果还存在进位的话需要再申请一个节点然后将进位信息放入即可。
********************************************************************************************************/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        // 定义指针初始化为空
        ListNode *head = nullptr, *tail = nullptr;
        // 还需要一个记录进位信息的变量
        int carry = 0;
        // 当两个指针都没有走到末尾的时候进行循环
        while(l1 || l2)
        {
            // 这里的处理比较巧妙，如果当前节点为空的话就默认其节点的值为0
            int n1 = l1 ? l1 -> val : 0;
            int n2 = l2 ? l2 -> val : 0;
            // 每次的求和结果等于两数之和加上进位的数（第一次求和当然不用考虑进位的情况）
            int sum = n1 + n2 + carry;
            // 如果第一次求和，则需要给结果链表的头尾指针进行赋值操作
            if(!head)
                // 给两个指针赋值（C++的赋值方式如下）
                head = tail = new ListNode(sum % 10);
            // 第二次及其之后的求和操作就只需要申请新节点然后将节点的值放入即可
            else
            {
                tail -> next = new ListNode(sum % 10);
                // tail指针后移
                tail = tail -> next;
            }
            // 处理进位的数字情况（与10相除即可）
            carry = sum / 10;
            // 两个游标均向后移动
            if(l1)
                l1 = l1 -> next;
            if(l2)
                l2 = l2 -> next;
            // 此时一趟处理已经完成，需要注意的是如果最终所有的结果都处理结束但是还是存在进位的话需要单独处理
        }
        if(carry > 0)
            tail -> next = new ListNode(carry);
        return head;
    }
}; 
