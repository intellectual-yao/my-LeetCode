// Source :https://leetcode.cn/problems/game-of-life/
// Author : GuoQiang Yao
// Date : 2022-11-24
/**************************************************************************************
根据 百度百科 ， 生命游戏 ，简称为 生命 ，是英国数学家约翰·何顿·康威在 1970 年发明的细胞自动机。

给定一个包含 m × n 个格子的面板，每一个格子都可以看成是一个细胞。每个细胞都具有一个初始状态： 1 即为 活细胞 （live），
或 0 即为 死细胞 （dead）。每个细胞与其八个相邻位置（水平，垂直，对角线）的细胞都遵循以下四条生存定律：

如果活细胞周围八个位置的活细胞数少于两个，则该位置活细胞死亡；
如果活细胞周围八个位置有两个或三个活细胞，则该位置活细胞仍然存活；
如果活细胞周围八个位置有超过三个活细胞，则该位置活细胞死亡；
如果死细胞周围正好有三个活细胞，则该位置死细胞复活；
下一个状态是通过将上述规则同时应用于当前状态下的每个细胞所形成的，其中细胞的出生和死亡是同时发生的。给你 m x n 网格面板 board 的当前状态，返回下一个状态。

示例 1：

输入：board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]
输出：[[0,0,0],[1,0,1],[0,1,1],[0,1,0]]
示例 2：

输入：board = [[1,1],[1,0]]
输出：[[1,1],[1,1]]

提示：

m == board.length
n == board[i].length
1 <= m, n <= 25
board[i][j] 为 0 或 1

进阶：

你可以使用原地算法解决本题吗？请注意，面板上所有格子需要同时被更新：你不能先更新某些格子，然后使用它们的更新后的值再更新其他格子。
本题中，我们使用二维数组来表示面板。原则上，面板是无限的，但当活细胞侵占了面板边界时会造成问题。你将如何解决这些问题？
**************************************************************************************/

/*******************************************************************************************************
题目分析：首先需要注意的是本题说明了所有棋子是同时被更新，而不是先更新一部分，再用更新之后的去更新剩下的棋子，
因此可以给更新过的棋子别的flag以区分更新后的情况，然后继续进行算法的执行，判断某一点周围的包含1的个数，按照规则1，3，
棋子的更新状态是同步的，因此可以合并，规则4另外是一种规则，全部执行完规则之后可以将新的数组遍历一次，然后将新的flag的位置的元素按照flag的定义变化为对应的值即可。
********************************************************************************************************/

class Solution {
public:
    void gameOfLife(vector<vector<int>>& board) {
        int neighbor[3] = {-1, 1, 0};
        int row = board.size();
        int col = board[0].size();
        for(int i = 0;i < row;++i)
        {
            for(int j = 0;j < col;++j)
            {
                // 统计周围八个位置的活细胞个数
                int liveceil = 0;
                for(int m = 0;m < 3;++m)
                {
                    for(int n = 0;n < 3;++n)
                    {
                        // 计算周围八个元素的坐标，排除自己本身的坐标之外
                        if(!(neighbor[m] == 0 && neighbor[n] == 0))
                        {
                            int new_i = i + neighbor[m];
                            int new_j = j + neighbor[n];
                            // 假设外面一圈的元素都是0
                            if((new_i < row && new_i >= 0) && (new_j < col && new_j >= 0) && (abs(board[new_i][new_j]) == 1))
                                liveceil += 1;
                        }
                    }
                }
                // 规则1或者规则3，二者共用一个状态
                if((liveceil < 2 || liveceil > 3) && (board[i][j] == 1))
                    // -1 代表这个细胞过去是活的现在死了
                    board[i][j] = -1;
                if((liveceil == 3) && (board[i][j] == 0))
                    // 2 代表这个细胞过去是死的现在活了
                    board[i][j] = 2;
            }
        }
        for(int i = 0;i < row;++i)
        {
            for(int j = 0;j < col;++j)
            {
                if(board[i][j] > 0)
                    board[i][j] = 1;
                else
                    board[i][j] = 0;
            }
        }
    }
};
 
