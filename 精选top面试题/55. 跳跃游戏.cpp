// Source : https://leetcode.cn/problems/jump-game/
// Author : GuoQiang Yao
// Date : 2022-6-20
/**************************************************************************************
给定一个非负整数数组 nums ，你最初位于数组的 第一个下标 。

数组中的每个元素代表你在该位置可以跳跃的最大长度。

判断你是否能够到达最后一个下标。

示例 1：

输入：nums = [2,3,1,1,4]
输出：true
解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。
示例 2：

输入：nums = [3,2,1,0,4]
输出：false
解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。

提示：

1 <= nums.length <= 3 * 104
0 <= nums[i] <= 10^5
**************************************************************************************/

/*******************************************************************************************************
题目分析： 每次都找出当前下标可以走到的其后的最大的位置，然后不断的维护这个位置，
如果这个位置最终可以走到最后或者大于最后的位置的话就返回true，反之返回false
********************************************************************************************************/

class Solution {
public:
    bool canJump(vector<int>& nums) {
        int reach = 0;
        for(int i = 0;i < nums.size();++i)
        {
            if(i > reach)
                return false;
            reach = max(i + nums[i], reach);
        }
        return true;
    }
}; 
