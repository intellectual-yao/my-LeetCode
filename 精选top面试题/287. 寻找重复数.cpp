// Source :https://leetcode.cn/problems/find-the-duplicate-number/
// Author : GuoQiang Yao
// Date : 2022-11-23
/************************************************************************************** 
给定一个包含 n + 1 个整数的数组 nums ，其数字都在 [1, n] 范围内（包括 1 和 n），可知至少存在一个重复的整数。

假设 nums 只有 一个重复的整数 ，返回 这个重复的数 。

你设计的解决方案必须 不修改 数组 nums 且只用常量级 O(1) 的额外空间。

 

示例 1：

输入：nums = [1,3,4,2,2]
输出：2
示例 2：

输入：nums = [3,1,3,4,2]
输出：3
 

提示：

1 <= n <= 105
nums.length == n + 1
1 <= nums[i] <= n
nums 中 只有一个整数 出现 两次或多次 ，其余整数均只出现 一次
 

进阶：

如何证明 nums 中至少存在一个重复的数字?
你可以设计一个线性级时间复杂度 O(n) 的解决方案吗？ 
**************************************************************************************/

/*******************************************************************************************************
题目分析：首先想一个简单的原理,如果把十个苹果放到九个抽屉中,那么一定有一个抽屉会放入两个苹果,因此本题的思路就来自于此.
因为元素从1开始到n结束因此我们可以通过比较,如果前半段的元素个数大于中间元素的值,那么重复的元素一定在前半段,
因此可以通过二分的方式进行搜素,每次更改左右指针的值.比如[1,3,2,2,4,5],中间位置元素值为3,但是小于等于3的元素有4个,因此重复元素个数一定在前半段.
********************************************************************************************************/
 

```cpp
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        // 因为本题需要从数字的范围中找到元素的出现次数，因此left下标从1开始而不是0
        int left = 1, right = nums.size() - 1;
        while(left < right)
        {
            int mid = (left + right) / 2;
            int cnt = 0;
            for(int num : nums)
            {
                if(num <= mid)
                    ++cnt;
            }
            // 如果小于等于中间位置的元素的个数小于中间元素的实际值，那么重复元素一定在右半区
            if(cnt <= mid)
                left = mid + 1;
            else
                right = mid;
        }
        return left;
    }
};
```
