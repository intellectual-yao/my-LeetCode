// Source : https://leetcode.cn/problems/longest-consecutive-sequence/
// Author : GuoQiang Yao
// Date : 2022-10-15
/**************************************************************************************　
给定一个未排序的整数数组 nums ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。

请你设计并实现时间复杂度为 O(n) 的算法解决此问题。

示例 1：

输入：nums = [100,4,200,1,3,2]
输出：4
解释：最长数字连续序列是 [1, 2, 3, 4]。它的长度为 4。
示例 2：

输入：nums = [0,3,7,2,5,8,4,6,0,1]
输出：9

提示：

0 <= nums.length <= 105
-109 <= nums[i] <= 109
**************************************************************************************/

/*******************************************************************************************************
题目分析：首先使用unordered_set对原始序列进行去重，依次遍历每个元素，
查找其左右的数据是否在新的不重复的数组中出现，如果出现的话就将其擦除然后继续寻找，
每次循环的最后一步将结果值进行更新，如果right - left值比结果值大的话，就更新，否则直接进行下一轮的循环。
********************************************************************************************************/

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        unordered_set<int> my_nums;
        // 利用无序集合的无重复元素特点，对每一个数据进行插入
        for(int i = 0;i < nums.size();++i)
            my_nums.insert(nums[i]);
        int res = 0;
        // 每次会进行元素的删除，当原始序列中的元素没有被删除结束的时候继续循环
        while(!my_nums.empty())
        {
            int tmp = *my_nums.begin();
            // 将当前的元素擦除
            my_nums.erase(tmp);
            int left = tmp - 1;
            int right = tmp + 1;
            // 在新建的无重复元素的序列中寻找是否存在待考察数字的左右数据\
            // 考察结束之后将左右元素擦除(如果存在的话)
            while(my_nums.find(left) != my_nums.end())
            {
                my_nums.erase(left);
                --left;
            }
            while(my_nums.find(right) != my_nums.end())
            {
                my_nums.erase(right);
                ++right;
            }
            // 因为最后一步会导致left和right分别移动一位，因此需要将移动的位置加回来
            ++left;
            --right;
            res = max(res, right - left + 1);
        }
        return res;
    }
};

总的来说，unordered_set 容器具有以下几个特性：
1、不再以键值对的形式存储数据，而是直接存储数据的值；
2、容器内部存储的各个元素的值都互不相等，且不能被修改。
3、不会对内部存储的数据进行排序
