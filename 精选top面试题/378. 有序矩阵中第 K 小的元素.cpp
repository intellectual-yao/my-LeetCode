// Source :https://leetcode.cn/problems/kth-smallest-element-in-a-sorted-matrix/
// Author : GuoQiang Yao
// Date : 2022-12-8
/**************************************************************************************
给你一个 n x n 矩阵 matrix ，其中每行和每列元素均按升序排序，找到矩阵中第 k 小的元素。
请注意，它是 排序后 的第 k 小元素，而不是第 k 个 不同 的元素。

你必须找到一个内存复杂度优于 O(n2) 的解决方案。

示例 1：

输入：matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8
输出：13
解释：矩阵中的元素为 [1,5,9,10,11,12,13,13,15]，第 8 小元素是 13
示例 2：

输入：matrix = [[-5]], k = 1
输出：-5

提示：

n == matrix.length
n == matrix[i].length
1 <= n <= 300
-109 <= matrix[i][j] <= 109
题目数据 保证 matrix 中的所有行和列都按 非递减顺序 排列
1 <= k <= n2

进阶：

你能否用一个恒定的内存(即 O(1) 内存复杂度)来解决这个问题?
你能在 O(n) 的时间复杂度下解决这个问题吗?这个方法对于面试来说可能太超前了，但是你会发现阅读这篇文章（ this paper ）很有趣。
**************************************************************************************/

/*******************************************************************************************************
题目分析：左上角和右下角的元素求出中间位置的元素，然后需要判断从开始到中间位置元素的个数有多少个，如果小于给定的k值的话，
说明需要的元素在右边，反之在左侧，还需要一个算法就是统计从开始位置到中间位置元素的个数的想法，从左下角开始向右遍历，
如果当前的元素小于中间位置的元素值，那么需要向右边的一行遍历，如果大于中间位置的值，需要向上一行遍历，然后计数器的计算需要根据行的列表进行递增
********************************************************************************************************/

class Solution {
public:
    int kthSmallest(vector<vector<int>>& matrix, int k) {
        int row = matrix.size(), col = matrix[0].size();
        int left = matrix[0][0], right = matrix[matrix.size() - 1][matrix.size() - 1];
        while(left < right)
        {
            int mid = left + (right - left) / 2;
            int cnt = sta_cnt(matrix, mid, row, col);
            // 如果中间位置之前的元素个数小于K，则目标值在右下侧
            if(cnt < k)
                left = mid + 1;
            // 否则中间位置应该置为right(该位置可能等于k)
            else
                right = mid;
        }
        return right;
    }
    int sta_cnt(vector<vector<int>> &matrix, int target, int row, int col)
    {
        // 从左下角开始遍历
        int i = row - 1, j = 0, cnt = 0;
        while(i >= 0 && j < col)
        {
            // 如果目前的元素值小于中间位置的值，则一整行都算在里面,然后向右走一行
            if(matrix[i][j] <= target)
            {
                ++j;
                cnt += i + 1;
            }
            // 否则当前行不存在小于中间位置值的，所以需要上衣一行
            else
                --i;
        }
        return cnt;
    }
};
 
