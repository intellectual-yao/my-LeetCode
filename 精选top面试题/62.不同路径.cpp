// Source : https://leetcode.cn/problems/unique-paths/
// Author : GuoQiang Yao
// Date : 2022-7-14
/**************************************************************************************　　
一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。

机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。


问总共有多少条不同的路径？

示例 1：

输入：m = 3, n = 7
输出：28
示例 2：

输入：m = 3, n = 2
输出：3
解释：
从左上角开始，总共有 3 条路径可以到达右下角。

向右 -> 向下 -> 向下
向下 -> 向下 -> 向右
向下 -> 向右 -> 向下
示例 3：
输入：m = 7, n = 3
输出：28
示例 4：

输入：m = 3, n = 3
输出：6

提示：

1 <= m, n <= 100
题目数据保证答案小于等于 2 * 10^9

**************************************************************************************/

/*******************************************************************************************************
题目分析： 状态转移方程为 f [ i ] [ j ] = f [ i - 1 ] [ j ] + f [ i ] [ j - 1 ]，
但是要注意，当 i , j 处于最上面的一排或者最左面的一排的时候i - 1或者j - 1就会出现报错，
因此要对这种情况进行特殊处理，最终，右下角的元素就是全部的路径之和。
********************************************************************************************************/

class Solution {
public:
    int uniquePaths(int m, int n) {
        // m行n列二维数组初始化
        vector<vector<int>> dp(m, vector<int>(n));
        for(int i = 0;i < m;++i)
        {
            for(int j = 0;j < n;++j)
            {
                // 将边界点的条件设置为1
                if(i == 0 || j == 0)
                    dp[i][j] = 1;
                else
                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
            }
        }
        // 右下角的元素就是一共的路径个数
        return dp[m - 1][n - 1];
    }
}; 
