// Source : https://leetcode.cn/problems/decode-ways/
// Author : Gu
// Date : 2022-7-24
/**************************************************************************************　　
一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：

‘A’ -> “1”
‘B’ -> “2”
…
‘Z’ -> “26”
要 解码 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，“11106” 可以映射为：

“AAJF” ，将消息分组为 (1 1 10 6)
“KJF” ，将消息分组为 (11 10 6)
注意，消息不能分组为 (1 11 06) ，因为 “06” 不能映射为 “F” ，这是由于 “6” 和 “06” 在映射中并不等价。

给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。

题目数据保证答案肯定是一个 32 位 的整数。

示例 1：

输入：s = “12”
输出：2
解释：它可以解码为 “AB”（1 2）或者 “L”（12）。
示例 2：

输入：s = “226”
输出：3
解释：它可以解码为 “BZ” (2 26), “VF” (22 6), 或者 “BBF” (2 2 6) 。
示例 3：

输入：s = “0”
输出：0
解释：没有字符映射到以 0 开头的数字。
含有 0 的有效映射是 ‘J’ -> “10” 和 ‘T’-> “20” 。
由于没有字符，因此没有有效的方法对此进行解码，因为所有数字都需要映射。

提示：

1 <= s.length <= 100
s 只包含数字，并且可能包含前导零。
**************************************************************************************/

/*******************************************************************************************************
题目分析： 本题的思路就是逐个字符进行考虑,观察是否有多个解法产生以及其之前位置的元素的解法与当前位置元素的解法的关系(即状态转移方程).
主要是写出状态转移方程,如果当前字符的前一个字符是0,那么当前字符的解法与前一字符的解法相同,如果当前字符的前两个字符满足11-26得话
那么当前的字符解法和前两个的字符解法相同.最终答案就是最后一个元素的解法.即为全部元素的解法.
本文参考大佬解法:https://leetcode.cn/problems/decode-ways/solution/jie-ma-fang-fa-tu-jie-dp-zui-qing-xi-yi-97hng/
********************************************************************************************************/

class Solution {
public:
    int numDecodings(string s) {
        vector<int> res(s.size() + 1);
        // 边界条件必须如此
        res[0] = 1;
        for(int i = 1;i <= s.size();++i)
        {
            // 如果前一个为0,则该位置解法与前一位置解法相同
            if(s[i - 1] != '0')
                res[i] = res[i - 1];
            if(i >= 2)
            {
                
                int temp = (s[i - 2] - '0') * 10 + s[i - 1] - '0';
                // 如果当前位置的前两个加起来符合要求的话
                if(temp >= 10 && temp <= 26)
                {
                    res[i] = res[i] + res[i - 2];
                }
            }
        }
        return res[s.size()];
    }
}; 
