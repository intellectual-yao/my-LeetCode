// Source : https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/
// Author : GuoQiang Yao
// Date : 2022-10-14
/**************************************************************************************　
　 给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。

在每一天，你可以决定是否购买和/或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。

返回 你能获得的 最大 利润 。

示例 1：

输入：prices = [7,1,5,3,6,4]
输出：7
解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。
随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3 。
总利润为 4 + 3 = 7 。
示例 2：

输入：prices = [1,2,3,4,5]
输出：4
解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。
总利润为 4 。
示例 3：

输入：prices = [7,6,4,3,1]
输出：0
解释：在这种情况下, 交易无法获得正利润，所以不参与交易可以获得最大利润，最大利润为 0 。

提示：

1 <= prices.length <= 3 * 104
0 <= prices[i] <= 104

**************************************************************************************/

/*******************************************************************************************************
题目分析：巧妙的计算方式，可以规避DP等复杂算法。本题主要计算利润的和，
当后一天的利润大于之前一天的话就要计算利润和，然后将所有天数的利润进行加和得到最终的总利润。
不需要使用DP等高端的算法，无脑遍历有时候也是可以完美解决此类问题的。
********************************************************************************************************/

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int ans = 0;
        if(prices.size() < 1)
            return 0;
        // 如果后者大于前者就相减计算并求和
        for(int i = 1;i < prices.size();++i)
        {
            if(prices[i] > prices[i - 1])
                ans += (prices[i] - prices[i - 1]);
        }
        return ans;
    }
}; 
