// Source : https://leetcode.cn/problems/surrounded-regions/
// Author : GuoQiang Yao
// Date : 2022-10-16
/**************************************************************************************　
给你一个 m x n 的矩阵 board ，由若干字符 ‘X’ 和 ‘O’ ，找到所有被 ‘X’ 围绕的区域，并将这些区域里所有的 ‘O’ 用 ‘X’ 填充。

示例 1：


输入：board = [[“X”,“X”,“X”,“X”],[“X”,“O”,“O”,“X”],[“X”,“X”,“O”,“X”],[“X”,“O”,“X”,“X”]]
输出：[[“X”,“X”,“X”,“X”],[“X”,“X”,“X”,“X”],[“X”,“X”,“X”,“X”],[“X”,“O”,“X”,“X”]]
解释：被围绕的区间不会存在于边界上，换句话说，任何边界上的 ‘O’ 都不会被填充为 ‘X’。 任何不在边界上，
或不与边界上的 ‘O’ 相连的 ‘O’ 最终都会被填充为 ‘X’。如果两个元素在水平或垂直方向相邻，则称它们是“相连”的。
示例 2：

输入：board = [[“X”]]
输出：[[“X”]]

提示：

m == board.length
n == board[i].length
1 <= m, n <= 200
board[i][j] 为 ‘X’ 或 ‘O’
**************************************************************************************/

/*******************************************************************************************************
题目分析： 从题目中可以看出，被围绕的区间不会存在于边界上，换句话说，任何边界上的 ‘O’ 都不会被填充为 ‘X’。 
任何不在边界上，或不与边界上的 ‘O’ 相连的 ‘O’ 最终都会被填充为 ‘X’。如果两个元素在水平或垂直方向相邻，则称它们是“相连”的。
********************************************************************************************************/

class Solution {
public:
    // 行列数定义(这里必须首先定义，否则dfs函数运行会报错)
    int row;
    int col;
    void dfs(vector<vector<char>> &board, int x, int y)
    {
        // 如果越界或者不与边界的'O'相连就返回,x是行数，y是列数
        if(x < 0 || x >= row || y < 0 || y >= col || board[x][y] != 'O')
            return;
        board[x][y] = 'T';
        // 检测上下左右的元素是否与边界的相邻
        dfs(board, x + 1, y);
        dfs(board, x - 1, y);
        dfs(board, x, y + 1);
        dfs(board, x, y - 1);
    }
    void solve(vector<vector<char>>& board) {
        row = board.size();
        col = board[0].size();
        if(row == 0)
            return;
        // 检查第一列和最后一列
        for(int i = 0;i < row;++i)
        {
            // 第一列
            dfs(board, i, 0);
            // 最后一列
            dfs(board, i, col - 1);
        }
        // 检查第一行和最后一行，已经检查过的不用再查
        for(int i = 1;i < col - 1;++i)
        {
            // 第一行
            dfs(board, 0, i);
            dfs(board, row - 1, i);
        }
        // 对原始的数组进行遍历，检查每个元素是否被改变
        for(int i = 0;i < row;++i)
        {
            for(int j = 0;j < col;++j)
            {
                if(board[i][j] == 'T')
                {
                    board[i][j] = 'O';
                }
                else if(board[i][j] == 'O')
                {
                    board[i][j] = 'X';
                }
            }
        }
    }
};  
