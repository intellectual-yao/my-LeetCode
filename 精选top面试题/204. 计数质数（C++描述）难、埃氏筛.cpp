// Source :https://leetcode.cn/problems/count-primes/
// Author : GuoQiang Yao
// Date : 2022-11-12
/**************************************************************************************
给定整数 n ，返回 所有小于非负整数 n 的质数的数量 。

示例 1：

输入：n = 10
输出：4
解释：小于 10 的质数一共有 4 个, 它们是 2, 3, 5, 7 。
示例 2：

输入：n = 0
输出：0
示例 3：

输入：n = 1
输出：0

提示：

0 <= n <= 5 * 10^6
**************************************************************************************/

/*******************************************************************************************************
题目分析： 如果 x 是质数，那么大于 x 的 x 的倍数 2x,3x,… 一定不是质数，因此我们可以从这里入手。
我们设isPrime[i] 表示数 i 是不是质数，如果是质数则为 1，否则为 0。从小到大遍历每个数，
如果这个数为质数，则将其所有的倍数都标记为合数（除了该质数本身），即 0，这样在运行结束的时候我们即能知道质数的个数。
这种方法的正确性是比较显然的：这种方法显然不会将质数标记成合数；另一方面，当从小到大遍历到数 x 时，
倘若它是合数，则它一定是某个小于 x的质数 y 的整数倍，故根据此方法的步骤，我们在遍历到 y 时，
就一定会在此时将 x 标记为isPrime[x]=0。因此，这种方法也不会将合数标记为质数。
当然这里还可以继续优化，对于一个质数 x，如果按上文说的我们从 2x 开始标记其实是冗余的，应该直接从x⋅x 开始标记，
因为2x,3x,… 这些数一定在 x 之前就被其他数的倍数标记过了，例如 2 的所有倍数，3 的所有倍数等。
********************************************************************************************************/

// 大数据量，暴力求解法运行超时
// class Solution {
// public:
//     bool is_prime(int x)
//     {
//         // 使用平方可以更快的结束计算
//         for(int i = 2;i * i <= x;++i)
//         {
//             if(x % i == 0)
//                 return false;
//         }
//         return true;
//     }
//     int countPrimes(int n) {
//         int cnt = 0;
//         for(int i = 2;i < n;++i)
//         {
//             if(is_prime(i))
//                 ++cnt;
//             // cnt += is_prime(i);
//         }
//         return cnt;
//     }
// };


class Solution {
public:
    int countPrimes(int n) {
        vector<int> is_prime(n, 1);
        int cnt = 0;
        // i从2开始计算，2是第一个质数
        for(int i = 2;i < n;++i)
        {
            if(is_prime[i])
            {
                cnt++;
                // 计算到平方根即可
                if((long long) i * i < n)
                {
                    for(int j = i * i;j < n;j += i)
                        is_prime[j] = 0;        
                }
            }
        }
        return cnt;
    }
}; 
