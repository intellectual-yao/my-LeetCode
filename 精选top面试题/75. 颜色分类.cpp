// Source : https://leetcode.cn/problems/sort-colors/
// Author : GuoQiang Yao
// Date : 2022-7-19
/**************************************************************************************　　
给定一个包含红色、白色和蓝色、共 n 个元素的数组 nums ，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。

我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。

必须在不使用库的sort函数的情况下解决这个问题。

示例 1：

输入：nums = [2,0,2,1,1,0]
输出：[0,0,1,1,2,2]
示例 2：

输入：nums = [2,0,1]
输出：[0,1,2]

提示：

n == nums.length
1 <= n <= 300
nums[i] 为 0、1 或 2

进阶：

你可以不使用代码库中的排序函数来解决这道题吗？
你能想出一个仅使用常数空间的一趟扫描算法吗？
**************************************************************************************/

/*******************************************************************************************************
题目分析： 首先将元素0全部放置到数组的最前端，使用的方法就是与游标进行交换，
一趟交换之后所有的元素0已经全部被放置到了数组最前端，之后在元素0之后放置元素1，
方法也是使用交换的方式进行，之后元素2已经被放置在数组的末尾。
********************************************************************************************************/

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int ptr = 0;
        // 将0与指针交换
        for(int i = 0;i < nums.size();++i)
        {
            if(nums[i] == 0)
            {
                swap(nums[i], nums[ptr]);
                ++ptr;
            }
        }
        // 将元素1放在0之后
        for(int i = ptr;i < nums.size();++i)
        {
            if(nums[i] == 1)
            {
                swap(nums[i], nums[ptr]);
                ++ptr;
            }
        }
    }
};
