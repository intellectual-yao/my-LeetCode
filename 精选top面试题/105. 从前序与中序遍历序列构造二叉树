// Source : https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/
// Author : GuoQiang Yao
// Date : 2022-10-9
/**************************************************************************************　　
给定两个整数数组 preorder 和 inorder ，其中 preorder 是二叉树的先序遍历， inorder 是同一棵树的中序遍历，请构造二叉树并返回其根节点。

示例 1:
输入: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
输出: [3,9,20,null,null,15,7]
示例 2:

输入: preorder = [-1], inorder = [-1]
输出: [-1]

提示:

1 <= preorder.length <= 3000
inorder.length == preorder.length
-3000 <= preorder[i], inorder[i] <= 3000
preorder 和 inorder 均 无重复 元素
inorder 均出现在 preorder
preorder 保证 为二叉树的前序遍历序列
inorder 保证 为二叉树的中序遍历序列
**************************************************************************************/

/*******************************************************************************************************
题目分析： 我们的构造顺序就是先通过 preorder 确认根节点，然后遍历 inorder 找到根节点的位置，根节点左侧为左子树，根节点右侧为右子树，然后递归解决
********************************************************************************************************/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        // 如果是空树的话，返回NULL
        if(!preorder.size() || !inorder.size())
            return nullptr;
        // 前序遍历第一个节点为根节点
        TreeNode *root = new TreeNode(preorder[0]);
        vector<int> preorder_left, preorder_right, inorder_left, inorder_right;
        // 在中序遍历中根据根节点的位置划分左右子树
        // 中序遍历中找到左子树并加入对应的数组
        int i;
        for(i = 0;i < preorder.size(); ++i)
        {
            if(inorder[i] == preorder[0])
                break;
            inorder_left.push_back(inorder[i]);
        }
        // 中序遍历中找到右子树并加入对应的数组
        for(int next_i = i + 1;next_i < preorder.size();++next_i)
        {
            inorder_right.push_back(inorder[next_i]);
        }
        // 先序遍历中找到左子树(第一个是根节点，所以从第二个开始)
        for(int j = 1;j < preorder.size();++j)
        {
            // 找左子树
            if(j <= inorder_left.size())
                preorder_left.push_back(preorder[j]);
            // 找右子树
            else
                preorder_right.push_back(preorder[j]);
        }
        root -> left = buildTree(preorder_left, inorder_left);
        root -> right = buildTree(preorder_right, inorder_right);
        return root;
    }
};
