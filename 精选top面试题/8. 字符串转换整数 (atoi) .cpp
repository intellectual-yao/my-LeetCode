// Source : https://leetcode.cn/problems/string-to-integer-atoi/
// Author : GuoQiang Yao
// Date : 2022-5-29

/**************************************************************************************
请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。

函数 myAtoi(string s) 的算法如下：

读入字符串并丢弃无用的前导空格
检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。
读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。
将前面步骤读入的这些数字转换为整数（即，“123” -> 123， “0032” -> 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。
如果整数数超过 32 位有符号整数范围 [−231, 231 − 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，
小于 −231 的整数应该被固定为 −231 ，大于 231 − 1 的整数应该被固定为 231 − 1 。
返回整数作为最终结果。
注意：

本题中的空白字符只包括空格字符 ’ ’ 。
除前导空格或数字后的其余字符串外，请勿忽略 任何其他字符。

示例 1：

输入：s = “42”
输出：42
解释：加粗的字符串为已经读入的字符，插入符号是当前读取的字符。
第 1 步：“42”（当前没有读入字符，因为没有前导空格）
^
第 2 步：“42”（当前没有读入字符，因为这里不存在 ‘-’ 或者 ‘+’）
^
第 3 步：“42”（读入 “42”）
^
解析得到整数 42 。
由于 “42” 在范围 [-231, 231 - 1] 内，最终结果为 42 。
示例 2：

输入：s = " -42"
输出：-42
解释：
第 1 步：" -42"（读入前导空格，但忽视掉）
^
第 2 步：" -42"（读入 ‘-’ 字符，所以结果应该是负数）
^
第 3 步：" -42"（读入 “42”）
^
解析得到整数 -42 。
由于 “-42” 在范围 [-231, 231 - 1] 内，最终结果为 -42 。
示例 3：

输入：s = “4193 with words”
输出：4193
解释：
第 1 步：“4193 with words”（当前没有读入字符，因为没有前导空格）
^
第 2 步：“4193 with words”（当前没有读入字符，因为这里不存在 ‘-’ 或者 ‘+’）
^
第 3 步：“4193 with words”（读入 “4193”；由于下一个字符不是一个数字，所以读入停止）
^
解析得到整数 4193 。
由于 “4193” 在范围 [-231, 231 - 1] 内，最终结果为 4193 。

提示：

0 <= s.length <= 200
s 由英文字母（大写和小写）、数字（0-9）、’ ‘、’+‘、’-’ 和 ‘.’ 组成

**************************************************************************************/

/*******************************************************************************************************
题目分析： 本题的难度不应该放在中等题,感觉,主要是处理前导零,然后处理正负号,然后读取数字,最后对数字的大小进行判断然后如果越界的话需要按照题目要求进行处理.
********************************************************************************************************/

class Solution {
public:
    int myAtoi(string s) {
        int index = 0;
        while(index < s.length())
        {
            // 让index移动到第一个字符的位置
            if(s[index] != ' ')
                break;
            ++index;
        }
        // 处理正负号
        // 定义标志位默认为1,方便最后的结果判断
        int flag = 1;
        if(s[index] == '+')
            ++index;
        else if(s[index] == '-')
        {
            ++index;
            flag = -1;
        }
        int res = 0;
        // 然后开始处理数字部分
        while(index < s.length())
        {
            // 如果当前的字符不是数字的话就退出循环
            if(s[index] < '0' || s[index] > '9')
                break;
            // 异常处理
            if (res > INT_MAX / 10 || (res == INT_MAX / 10 && (s[index] - '0') > INT_MAX % 10)) {
                return INT_MAX;
            }
            if (res < INT_MIN / 10 || (res == INT_MIN / 10 && (s[index] - '0') > -(INT_MIN % 10))) {
                return INT_MIN;
            } 
            // 通过将字符转换为数字并且通过加和的方式对最终的数字进行计算
            res = res * 10 + flag * (s[index] - '0');
            ++index;
        }
        return res;
    }
};


// class Solution {
// public:
//     int myAtoi(string s) {
//         const unsigned int MAX = 2147483648;
//         int i = 0; 
//         bool isEegative = false;
//         long ans = 0;
//         // 跳过前导空格
//         while (s[i] == ' ') i++;
//         // 检查符号
//         if (s[i] == '-') {
//             isEegative = true;
//             i++;
//         } else if (s[i] == '+') {
//             i++;
//         }
//         // 读取数字
//         while (s[i] >= '0' && s[i] <= '9' && ans <= MAX) {
//             ans = ans * 10 + s[i] - '0';
//             i++;
//         }
//         // 处理整数范围
//         if (isEegative) {
//             return  -1 * (ans > INT32_MAX ? MAX : ans);
//         } else {
//             return (ans > INT32_MAX ? INT32_MAX : ans);
//         }
//     }
// };  
