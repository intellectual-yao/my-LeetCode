// Source : https://leetcode-cn.com/problems/rank-transform-of-an-array/
// GuoQiang Yao
// Date : 2022-4-27

/**************************************************************************************
给你一个整数数组 arr ，请你将数组中的每个元素替换为它们排序后的序号。

序号代表了一个元素有多大。序号编号的规则如下： 序号从 1 开始编号。 一个元素越大，那么序号越大。如果两个元素相等，那么它们的序号相同。 每个数字的序号都应该尽可能地小。

示例 1：

输入：arr = [40,10,20,30]
输出：[4,1,2,3]
解释：40 是最大的元素。 10 是最小的元素。 20 是第二小的数字。 30 是第三小的数字。

示例 2：

输入：arr = [100,100,100]
输出：[1,1,1]
解释：所有元素有相同的序号。

示例 3：

输入：arr = [37,12,28,9,100,56,80,5,12]
输出：[5,3,4,2,8,6,7,1,3]

提示：

0 <= arr.length <= 105
-109 <= arr[i] <= 109

**************************************************************************************/

/*******************************************************************************************************
题目分析:首先我们将原始的数组直接进行排序,如果相邻两个元素不相等的话就在哈希表中正常进行下标递增,
将所有的元素都存入哈希表之后,再将哈希表中的每个元素对应的下标进行读出即可.注意:因为我们这里涉及到前后元素的比较,
因此必须对第一个元素进行处理,因此第一个元素的下标就默认为1即可,这也符合常理.
********************************************************************************************************/

class Solution {
public:
    vector<int> arrayRankTransform(vector<int>& arr) {
        // 最终的序号从一开始
        int cnt = 1;
        vector<int> my_arr;
        unordered_map<int, int> hash_arr;
        //如果长度为0，直接返回
        // if(len==0) 
            // return my_arr;
        //复制原先的数组
        my_arr = arr;
        sort(arr.begin(),arr.end()); 
        // 哈希表记录每个数字应该对应的下标
        for(int i = 0;i < arr.size();++i)
        {
            // 此处必须先判断i再进行元素的判断否则会越界报错
            // 只要排序之后相邻两个元素不相同的话就可以将其对应的下标+1
            if(i != 0 && arr[i] != arr[i - 1])
                ++cnt;
            hash_arr[arr[i]] = cnt;
        }
        // 取出每个哈希表中的元素
        for(int i = 0;i < arr.size(); ++i)
        {
            my_arr[i] = hash_arr[my_arr[i]];
        }
        return my_arr;
    }
};

