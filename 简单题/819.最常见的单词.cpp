// Source : https://leetcode-cn.com/problems/most-common-word/
// Author : GuoQiang Yao
// Date : 2022-1-3

/**************************************************************************************
给定一个段落 (paragraph) 和一个禁用单词列表 (banned)。返回出现次数最多，
同时不在禁用列表中的单词。题目保证至少有一个词不在禁用列表中，而且答案唯一。
禁用列表中的单词用小写字母表示，不含标点符号。段落中的单词不区分大小写。答案都是小写字母。

示例：

输入: 
paragraph = "Bob hit a ball, the hit BALL flew far after it was hit."
banned = ["hit"]
输出: "ball"
解释: 
"hit" 出现了3次，但它是一个禁用的单词。
"ball" 出现了2次 (同时没有其他单词出现2次)，所以它是段落里出现次数最多的，且不在禁用列表中的单词。 
注意，所有这些单词在段落里不区分大小写，标点符号需要忽略（即使是紧挨着单词也忽略， 比如 "ball,"）， 
"hit"不是最终的答案，虽然它出现次数更多，但它在禁用单词列表中。
 

提示：

1 <= 段落长度 <= 1000
0 <= 禁用单词个数 <= 100
1 <= 禁用单词长度 <= 10
答案是唯一的, 且都是小写字母 (即使在 paragraph 里是大写的，即使是一些特定的名词，答案都是小写的。)
paragraph 只包含字母、空格和下列标点符号!?',;.
不存在没有连字符或者带有连字符的单词。
单词里只包含字母，不会出现省略号或者其他标点符号。

**************************************************************************************/

/*******************************************************************************************************
题目分析： 因为段落中的单词不区分大小写，但是答案要求的却都是小写字母组成的单词，
这要求我们在处理单词的时候将单词转化为小写在进行次数的比较。此类问题常见的解法就是将段落中的单词挨个取出，
然后对每个单词出现的频率进行降序排序，之后从前向后找，将第一个不在ban中的单词返回即可。
********************************************************************************************************/

class Solution {
public:
    string mostCommonWord(string paragraph, vector<string>& banned) {
    paragraph += ' ';   //给字符串末尾增加一个特殊符号（非字母即可）
    string temp = "";   //暂存每一个即将被放入的单词
    map<string, int> m;   //哈希表记录单词出现频次
    set<string> ban(banned.begin(), banned.end()); //把禁用列表放到集合中方便查找
    
    for (char ch : paragraph) 
    {
        //如果ch不是一个字母，进入if语句
        if (!isalpha(ch)) 
        {
            if (!temp.empty())
            {
                m[temp]++;
                temp.clear();
            }
        }
        else
            temp += tolower(ch);  //注意返回的是小写字母
    }
    
    vector<string> words;
    for (auto p : m)
        //将哈希表的第一个位置上的元素放进vector中
        words.push_back(p.first);

    //按照频次降序
    sort(words.begin(), words.end(), [&](string &s, string &p) { return m[s] > m[p]; }); 
    
    if (banned.empty()) //如果没有禁用单词，直接返回排序后列表首元素
        return words[0];
    for (auto w : words) //否则在禁用列表中查找，第一个没有的单词就返回
        //如果W在ban中的位置是在末尾之后，也就是不在ban中，那么即可返回w
        if (ban.find(w) == ban.end())
            return w;
    return "";
    }
};
