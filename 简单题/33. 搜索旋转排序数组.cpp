// Source : https://leetcode.cn/problems/search-in-rotated-sorted-array/
// Author : GuoQiang Yao
// Date : 2022-5-19

/**************************************************************************************
整数数组 nums 按升序排列，数组中的值 互不相同 。

在传递给函数之前，nums 在预先未知的某个下标 k（0 <= k < nums.length）上进行了 旋转，
使数组变为 [nums[k], nums[k+1], …, nums[n-1], nums[0], nums[1], …, nums[k-1]]（下标 从 0 开始 计数）。
例如， [0,1,2,4,5,6,7] 在下标 3 处经旋转后可能变为 [4,5,6,7,0,1,2] 。

给你 旋转后 的数组 nums 和一个整数 target ，如果 nums 中存在这个目标值 target ，则返回它的下标，否则返回 -1 。

示例 1：

输入：nums = [4,5,6,7,0,1,2], target = 0
输出：4
示例 2：

输入：nums = [4,5,6,7,0,1,2], target = 3
输出：-1
示例 3：

输入：nums = [1], target = 0
输出：-1

提示：

1 <= nums.length <= 5000
-10^4 <= nums[i] <= 10^4
nums 中的每个值都 独一无二
题目数据保证 nums 在预先未知的某个下标上进行了旋转
-10^4 <= target <= 10^4
**************************************************************************************/

/*******************************************************************************************************
题目分析： 本题小编算是掉进坑里了，一直在思考旋转数组的问题，
但是后来想了半天发现本题其实是在考同学们能不能在非有序的数组中查询到想要的哪个数据，
那么我们就采用二分的方法进行查找，不过每次需要对比中间位置的元素的大小与区间两边元素大小，
然后进行区间的缩小。当然也可以使用暴力法直接解决问题，但是这样得话这个题的意义就不再存在，
而且如果是在面试的时候，面试官也不会满足于这个答案。
********************************************************************************************************/

// 暴力算法可以直接解决本问题，但是起不到刷题的作用，因此还是用其他的方法完成本题较好
// class Solution {
// public:
//     int search(vector<int>& nums, int target) {
//         for (int i = 0; i < nums.size(); i++) 
//         {
//             if (nums[i] == target)
//             {
//                 return i;
//             }
//         }
//         return -1;
//     }
// };
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n = nums.size();
        int l = 0, r = n - 1;
        while (l <= r) 
        {
            int mid = (l + r) / 2;
            if (nums[mid] == target) 
                return mid;
            // 如果第一个数字小于等于中间位置的数字,说明目标在左半区，否则在右半区
            if (nums[0] <= nums[mid]) 
            {
                // 缩小区间
                if (nums[0] <= target && target < nums[mid]) 
                    r = mid - 1;
                else 
                    l = mid + 1;
            } 
            else 
            {
                if (nums[mid] < target && target <= nums[n - 1]) 
                    l = mid + 1;
                else 
                    r = mid - 1;
            }
        }
        return -1;
    }
}; 
