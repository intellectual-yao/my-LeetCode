// Source : https://leetcode-cn.com/problems/increasing-decreasing-string/
// Author : GuoQiang Yao
// Date : 2022-5-6

/**************************************************************************************
给你一个字符串 s ，请你根据下面的算法重新构造字符串：

从 s 中选出 最小 的字符，将它 接在 结果字符串的后面。
从 s 剩余字符中选出 最小 的字符，且该字符比上一个添加的字符大，将它 接在 结果字符串后面。
重复步骤 2 ，直到你没法从 s 中选择字符。
从 s 中选出 最大 的字符，将它 接在 结果字符串的后面。
从 s 剩余字符中选出 最大 的字符，且该字符比上一个添加的字符小，将它 接在 结果字符串后面。
重复步骤 5 ，直到你没法从 s 中选择字符。
重复步骤 1 到 6 ，直到 s 中所有字符都已经被选过。
在任何一步中，如果最小或者最大字符不止一个 ，你可以选择其中任意一个，并将其添加到结果字符串。

请你返回将 s 中字符重新排序后的 结果字符串 。

示例 1：

输入：s = “aaaabbbbcccc”
输出：“abccbaabccba”
解释：第一轮的步骤 1，2，3 后，结果字符串为 result = “abc”
第一轮的步骤 4，5，6 后，结果字符串为 result = “abccba”
第一轮结束，现在 s = “aabbcc” ，我们再次回到步骤 1
第二轮的步骤 1，2，3 后，结果字符串为 result = “abccbaabc”
第二轮的步骤 4，5，6 后，结果字符串为 result = “abccbaabccba”
示例 2：

输入：s = “rat”
输出：“art”
解释：单词 “rat” 在上述算法重排序以后变成 “art”
示例 3：

输入：s = “leetcode”
输出：“cdelotee”
示例 4：

输入：s = “ggggggg”
输出：“ggggggg”
示例 5：

输入：s = “spo”
输出：“ops”

提示：

1 <= s.length <= 500
s 只包含小写英文字母。
**************************************************************************************/

/*******************************************************************************************************
题目分析: 首先统计出每个字符的出现次数，可以利用数组或者哈希表完成此功能，注意：
如果利用数组完成此功能的话就需要将字符转换成相应的数组下标，然后下标的元素对应的是这个字符出现的次数，
取出字符的时候也是需要将下标转换为字母进行拼接，然后将数组对应位置的元素减一，注意第一次取出是从前到后，第二次取是从后到前
********************************************************************************************************/

class Solution {
public:
    string sortString(string s) {
        int arr[26] = {0};
        // 统计各字符出现次数存入数组特定位置
        for (int i = 0; i < s.size(); ++i) 
        {
            int b = s[i] - 'a';
            ++arr[b];
        }
        string res;
        int len = s.size();
        while (len) 
        {
            // 从左往右依次取出存在的字符
            for (int i = 0; i < 26; ++i)
            {
                //如果该字符没有出现过或者已经被全部取出则直接进行下一次循环
                if (arr[i] == 0)
                    continue;
                //取出的字符拼接在结果字符的末尾
                res += 'a' + i;
                // 每次成功取出一个字符后 len减1 数组对应位置值减1
                --len;
                --arr[i];
            }
            // 从右往左依次取出存在的字符
            for (int i = 25; i >= 0; --i) 
            {
                if (arr[i] == 0)
                    continue;
                //取出的字符拼接在结果字符的末尾
                res += 'a' + i;
                // 每次成功取出一个字符后 len减1 数组对应位置值减1
                --len;
                --arr[i];
            }
        }
        return res;
    }
}; 
