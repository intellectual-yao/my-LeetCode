// Source : https://leetcode-cn.com/problems/find-the-town-judge/
// Author : GuoQiang Yao
// Date : 2022-2-28

/**************************************************************************************
小镇里有 n 个人，按从 1 到 n 的顺序编号。传言称，这些人中有一个暗地里是小镇法官。

如果小镇法官真的存在，那么：

小镇法官不会信任任何人。
每个人（除了小镇法官）都信任这位小镇法官。
只有一个人同时满足属性 1 和属性 2 。
给你一个数组 trust ，其中 trust[i] = [ai, bi] 表示编号为 ai 的人信任编号为 bi 的人。

如果小镇法官存在并且可以确定他的身份，请返回该法官的编号；否则，返回 -1 。

示例 1：

输入：n = 2, trust = [[1,2]]
输出：2
示例 2：

输入：n = 3, trust = [[1,3],[2,3]]
输出：3
示例 3：

输入：n = 3, trust = [[1,3],[2,3],[3,1]]
输出：-1

提示：

1 <= n <= 1000
0 <= trust.length <= 104
trust[i].length == 2
trust 中的所有trust[i] = [ai, bi] 互不相同
ai != bi
1 <= ai, bi <= n

**************************************************************************************/

/*******************************************************************************************************
题目分析：从题意不难看出我们需要统计数组第二个维度元素出现的次数，
如果次数是n - 1的话说明每个人都信任他，并且该元素的第一个维度的出现次数为0。
我们需要比较的是每个人的出现次数，因此编号要从1开始到n结束，所以第二个循环需要注意一下。
********************************************************************************************************/

class Solution {
public:
    int findJudge(int n, vector<vector<int>>& trust) {
        vector<int> first(n + 1),second(n + 1);
        for(int i = 0;i < trust.size();++i)
        {
            //记录第一个元素与第二个元素的出现次数
            ++first[trust[i][0]];
            ++second[trust[i][1]];
        }
        //此处注意起始位置是1，而不是0
        for(int i = 1;i < n + 1;++i)
        {
            if(second[i] == n - 1 && first[i] == 0)
                return i;
        }
        return -1;
    }
};
