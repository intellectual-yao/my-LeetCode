// Source : https://leetcode.cn/problems/next-permutation/
// Author : GuoQiang Yao
// Date : 2022-5-18

/**************************************************************************************
整数数组的一个 排列 就是将其所有成员以序列或线性顺序排列。

例如，arr = [1,2,3] ，以下这些都可以视作 arr 的排列：[1,2,3]、[1,3,2]、[3,1,2]、[2,3,1] 。
整数数组的 下一个排列 是指其整数的下一个字典序更大的排列。更正式地，如果数组的所有排列根据其字典顺序从小到大排列在一个容器中，
那么数组的 下一个排列 就是在这个有序容器中排在它后面的那个排列。如果不存在下一个更大的排列，那么这个数组必须重排为字典序最小的排列（即，其元素按升序排列）。

例如，arr = [1,2,3] 的下一个排列是 [1,3,2] 。
类似地，arr = [2,3,1] 的下一个排列是 [3,1,2] 。
而 arr = [3,2,1] 的下一个排列是 [1,2,3] ，因为 [3,2,1] 不存在一个字典序更大的排列。
给你一个整数数组 nums ，找出 nums 的下一个排列。

必须 原地 修改，只允许使用额外常数空间。

示例 1：

输入：nums = [1,2,3]
输出：[1,3,2]
示例 2：

输入：nums = [3,2,1]
输出：[1,2,3]
示例 3：

输入：nums = [1,1,5]
输出：[1,5,1]

提示：

1 <= nums.length <= 100
0 <= nums[i] <= 100
**************************************************************************************/

/*******************************************************************************************************
题目分析： 字典序的解法主要看这个图就可以（本题来自LeetCode题解的大佬，小编开始也是没有看懂题目在说啥），
解答地址为：https://leetcode.cn/problems/next-permutation/solution/xia-yi-ge-pai-lie-yi-kan-jiu-dong-by-ych-983q/

下图也是博客的一位大佬贡献的字典序查找的方法，代码就是按照下图的四个步骤编写即可，难度不大，主要是不熟悉字典序查找这个新名词。
博客文章地址为：https://blog.csdn.net/qq_37050329/article/details/86637183

********************************************************************************************************/

class Solution {
public:
    void nextPermutation(vector<int>& nums) {
         int left = nums.size() - 2;
        //  主要是要搞懂下一个排列的意义以及字典序的意义
        //  前面大于后面的
         while(left >= 0 && nums[left] >= nums[left + 1])
            --left;
        //已经是最大数组了
        if(left < 0)
            sort(nums.begin(), nums.end());
        else 
        {
            int right = nums.size() - 1;
            while (nums[left] >= nums[right]) 
                --right;
            // 找到了以后交换两个数字即可
            swap(nums[right], nums[left]);
            // 找到之后需要将之后的元素翻转
            reverse(nums.begin() + left + 1, nums.end());
        }

    }
}; 
