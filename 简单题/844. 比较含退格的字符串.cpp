// Source : https://leetcode-cn.com/problems/backspace-string-compare/
// Author : GuoQiang Yao
// Date : 2022-1-9

/**************************************************************************************
给定 s 和 t 两个字符串，当它们分别被输入到空白的文本编辑器后，请你判断二者是否相等。# 代表退格字符。

如果相等，返回 true ；否则，返回 false 。

注意：如果对空文本输入退格字符，文本继续为空。

示例 1：

输入：s = “ab#c”, t = “ad#c”
输出：true
解释：S 和 T 都会变成 “ac”。
示例 2：

输入：s = “ab##”, t = “c#d#”
输出：true
解释：s 和 t 都会变成 “”。
示例 3：

输入：s = “a##c”, t = “#a#c”
输出：true
解释：s 和 t 都会变成 “c”。
示例 4：

输入：s = “a#c”, t = “b”
输出：false
解释：s 会变成 “c”，但 t 仍然是 “b”。

提示：

1 <= s.length, t.length <= 200
s 和 t 只含有小写字母以及字符 ‘#’

**************************************************************************************/

/*******************************************************************************************************
题目分析：使用栈完成此类问题的解决较为合适，首先将字符入栈，然后当碰到退格字符的时候就将栈顶元素出栈，
最后比较栈中剩下的元素是否相等即可。注意：本题使用string类型字符串来充当栈，
因此栈顶元素就是字符串的最后一个位置上的元素。
********************************************************************************************************/

class Solution {
public:
    bool backspaceCompare(string S, string T) {
        string s, t; // 当栈来用
        for (int i = 0; i < S.size(); i++) 
        {
            //如果当前字符不是'#',就把当前字符入栈，反之则出栈栈顶元素。
            if (S[i] != '#') 
                s += S[i];
            else if (!s.empty())
                s.pop_back();
        }
        for (int i = 0; i < T.size(); i++) 
        {
            if (T[i] != '#') 
                t += T[i];
            else if (!t.empty())
                t.pop_back();
        }
        if (s == t) 
            return true; // 直接比较两个字符串是否相等，比用栈来比较方便多了
        return false;
    }
};
